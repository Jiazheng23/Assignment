#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#pragma warning (disable : 4996)

typedef struct {
	char name[50], password[20], passwordRecovery[50],
		gender, icNo[15], contactNo[15], memberID[6];
}Member;



//void staffMenu();
void memberMenu();
void nonMemberMenu();
void login();


void nonMemberMenu() {
	FILE* fp;
	fp = fopen("members.bin", "ab+");

	if (fp == NULL) {
		printf("Error opening file. \n");
		exit(-1);
	}

	Member newMember;
	int nameExists;

	do {
		nameExists = 0;
		
		printf("Sign up For a New Account\n");
		printf("Enter Name: ");
		rewind(stdin);
		scanf("%[^\n]", newMember.name);

		for (int i = 0; newMember.name[i]; i++) { //Convert name to uppercase
			newMember.name[i] = toupper(newMember.name[i]);
		}
		
		rewind(fp);
		Member temp;
		while (fread(&temp, sizeof(Member), 1, fp)) {
			if (strcmp(temp.name, newMember.name) == 0) {
				printf("Name already exists. Please enter another name.\n");
				nameExists = 1;
				break;
			}
		}
	} while (nameExists);

	printf("Enter Password: ");
	scanf("%s", newMember.password);

	printf("Enter Gender (M/F): ");
	scanf(" %c", &newMember.gender);
	newMember.gender = toupper(newMember.gender);
	while (newMember.gender != 'M' && newMember.gender != 'F') {
		printf("Invalid input. Please Enter M or F: ");
		scanf(" %c", &newMember.gender);
		newMember.gender = toupper(newMember.gender);
	}

	int valid;
	do {
		printf("Enter IC number (XXXXXX-XX-XXXX): ");
		scanf("%s", newMember.icNo);

		valid = 1; //Check IC No format
		if (strlen(newMember.icNo) != 14) {
			valid = 0;
		}
		else if (newMember.icNo[6] != '-' || newMember.icNo[9] != '-') {
			valid = 0;
		}
		else {
			for (int i = 0; i < 14; i++) {
				if (i != 6 && i != 9 && !isdigit(newMember.icNo[i])) {
					valid = 0;
					break;
				}
			}
		}
		if (!valid) {
			printf("Invalid IC No format. Please enter in the format XXXXXX-XX-XXXX\n");
		}
	} while (!valid);

	do {
		printf("Enter Contact Number (01X-XXXXXXX or 01X-XXXXXXXX): ");
		scanf("%s", newMember.contactNo);
		
		valid = 1;
		if (strlen(newMember.contactNo) < 10 || strlen(newMember.contactNo) > 12) {
			valid = 0;
		}
		else if (newMember.contactNo[0] != '0' || newMember.contactNo[1] != '1') {
			valid = 0;
		}
		else if (newMember.contactNo[3] != '-') {
			valid = 0;
		}
		else {
			for (int i = 0; i < strlen(newMember.contactNo); i++) {
				if (i != 3 && !isdigit(newMember.contactNo[i])) {
					valid = 0;
					break;
				}
			}
		} 
		if (!valid){
			printf("Invalid Contact No format. Please enter in the format 01X-XXXXXXX or 01X-XXXXXXXX.\n");
		}
	} while (!valid);

	//Generate Member ID
	fseek(fp, 0, SEEK_END); //Move the file pointer to EOF
	int numMembers = ftell(fp) / sizeof(Member); //Calculate No of members by dividing the current position of the file pointer by the size of each Member structure
	sprintf(newMember.memberID, "M%04d", numMembers + 1); //Generate with format "MXXX", Increment number of members by 1 to ensure a unique ID for each new member

	fwrite(&newMember, sizeof(Member), 1, fp);
	printf("Member Registered Successful.\n");
	printf("Your Member ID is: %s\n", newMember.memberID);
	printf("Please Remember Your Member ID For Future Login.\n");
	printf("Done");

	fclose(fp);
}

int loginMember(char* enteredMemberID, char* enteredPassword) {
	FILE* readIDPass = fopen("members.bin", "rb");
	if (readIDPass == NULL) {
		printf("Error opening file. \n");
		return 0;
	}

	Member temp;
	while (fread(&temp, sizeof(Member), 1, readIDPass)) {
		if (strcmp(temp.memberID, enteredMemberID) == 0 && strcmp(temp.password, enteredPassword) == 0) {
			fclose(readIDPass);
			return 1; // Login successful
		}
	}

	fclose(readIDPass);
	return 0; // Login unsuccessful
}



int countMembers() { //Count quantity of members
	FILE* memberQuantity;
	Member entered;
	int count = 0;

	memberQuantity = fopen("members.bin", "rb");
	if (memberQuantity == NULL) {
		printf("Error opening file!\n");
		return 0;
	}

	while (fread(&entered, sizeof(Member), 1, memberQuantity)) {
		count++;
	}

	fclose(memberQuantity);
	return count;
}

/*int findMemberIDPass(char* enteredMemberID, char* enteredICNo) { // To compare member ID and Password
	int numOfMember = 0;

	FILE* readMemberIDPass;
	Member fileMember;
	readMemberIDPass = fopen("members.bin", "rb");

	if (readMemberIDPass == NULL) {
		printf("Error opening file!\n");
		return 0;
	}

	while (fread(&fileMember, sizeof(Member), 1, readMemberIDPass)) {
		numOfMember++;
		if (strcmp(fileMember.memberID, enteredMemberID) == 0 && strcmp(fileMember.icNo, enteredICNo) == 0) {
			fclose(readMemberIDPass);
			return 1; //Member ID and IC No match
		}
	}
	fclose(readMemberIDPass);
	return 0;// Member ID and IC No not match
}*/

void passwordRecovery() {

	Member fileMember[30];
	Member input;
	char confirmPass[20];
	int found = -1; // Flag to check if member found
	int totalMembers;
	char confirm;

	totalMembers = countMembers(); //Count total number of members

	FILE* readMemberFile = fopen("members.bin", "rb"); //Open member file
	if (readMemberFile == NULL) {
		printf("Error opening file!\n");
		return;
	}

	fread(fileMember, sizeof(Member), totalMembers, readMemberFile); //Read members from the file into array
	fclose(readMemberFile);

	do {
		printf("\n == = Password Recovery == = \n");
		printf("Enter Member ID: ");
		rewind(stdin);
		scanf("%s", input.memberID);
		printf("Enter IC Number (XXXXXX-XX-XXXX): ");
		rewind(stdin);
		scanf("%s", input.icNo);

		found = -1;

		for (int i = 0; i < totalMembers; i++) { //Search data of member
			if (strcmp(fileMember[i].memberID, input.memberID) == 0) {
				if (strcmp(fileMember[i].icNo, input.icNo) == 0) {
					found = i; //Member found
					break;
				}
			}
		}

		if (found == -1) {
			printf("Member ID and IC No not match\n");
			printf("Please try again!\n");
		}
	} while (found == -1);

	printf("\nEnter new password: ");
	rewind(stdin);
	scanf("%[^\n]", fileMember[found].password);

	do {
		printf("Please double confirm your new password: ");
		rewind(stdin);
		scanf("%[^\n]", confirmPass);

		if (strcmp(fileMember[found].password, confirmPass) != 0) {
			printf("Passwords do not match. Please try again.\n");
		}

	} while (strcmp(fileMember[found].password, confirmPass) != 0);

	do {
		printf("Do you really want to change your password? (Y or N): ");
		rewind(stdin);
		scanf(" %c", &confirm);

		if (toupper(confirm) == 'Y') {
			FILE* writePassToFile;
			writePassToFile = fopen("members.bin", "wb");

			if (writePassToFile == NULL) {
				printf("Error opening file!\n");
				return;
			}

			for (int i = 0; i < totalMembers; i++) {
				fwrite(&fileMember[i], sizeof(Member), 1, writePassToFile);
			}

			fclose(writePassToFile);
			printf("Password changed successfully.\n");
		}

		else if (toupper(confirm) == 'N') {
			printf("Password change cancelled.\n");
			login();
		}

		else {
			printf("Invalid input. Please enter 'Y' for yes or 'N' for No.\n");
		}

	} while (toupper(confirm) != 'Y' && toupper(confirm) != 'N');
}

void login() {
	char enteredMemberID[20];
	char enteredPassword[20];
	int loginChance = 0;
	int maxLoginChances = 3;

	do {
		printf("\n=== Member Login ===\n");
		printf("Enter Member ID: ");
		rewind(stdin);
		scanf("%s", enteredMemberID);
		printf("Enter Password: ");
		rewind(stdin);
		scanf("%[^\n]", enteredPassword);

		int result = loginMember(enteredMemberID, enteredPassword);

		if (result == 1) {
			printf("Login successful!\n");
			break;
		}
		else if (loginChance < maxLoginChances - 1 ) {
			printf("Invalid Member ID or Password. Please try again.\n");
			printf("You have %d %s left.\n", maxLoginChances - loginChance - 1, maxLoginChances - loginChance == 2 ? "chance" : "chances");
		}
		else {
			printf("Invalid Member ID or Paswword.\n");
			printf("You have exceeded the maximum number of login chances.\n");
			printf("Would you like to recover your password? (Enter Y for Yes to continue and any other alphabet/number for Exit): ");
			
			char recover;
			scanf(" %c", &recover);
			if (toupper(recover) == 'Y') {
				passwordRecovery();
			}
			else {
				printf("Returning to Main Menu\n");
				break;
			}
		}
		loginChance++;
	} while (loginChance < maxLoginChances);
}

void searchMemberInfo() {

	Member fileMember;
	char enteredID[30];
	int found = 0;
	int totalMembers;
	char continueSearch;

	totalMembers = countMembers();


		do {
			printf("\n === Member Search ===\n");
			printf("Enter Member ID: ");
			rewind(stdin);
			scanf("%s", enteredID);

			FILE* searchMember;
			searchMember = fopen("members.bin", "rb");

			if (searchMember == NULL) {
				printf("Error opening file\n");
				return;
			}

			for (int i = 0; i < totalMembers; i++) { //Search for entered Member ID 
				fread(&fileMember, sizeof(Member), 1, searchMember);
				if (strcmp(fileMember.memberID, enteredID) == 0) {
					found = 1;
					break;
				}
			}
			fclose(searchMember);

			if (found) { //Member ID found, display member information
				printf("\n === Member Information === \n");
				printf("Member ID      : %s\n", fileMember.memberID);
				printf("Name           : %s\n", fileMember.name);
				printf("Password       : %s\n", fileMember.password);
				printf("Gender         : %c\n", fileMember.gender);
				printf("IC Number      : %s\n", fileMember.icNo);
				printf("Contact Number : %s\n", fileMember.contactNo);
			}
			else {
				printf("Member ID '%s' not found. Please try again.\n", enteredID);
			}

			printf("\nDo you want to continue searching? (Y for yes and any elements for No): ");
			rewind(stdin);
			scanf(" %c", &continueSearch);

		} while (toupper(continueSearch) == 'Y');
}

void modifyMemberInfo() {
	Member inFileMember[30];
	char enteredMemID[10];
	char enteredICNo[15];
	int found = -1;
	int totalMems;
	char continousChoice;

	do {
		printf("\n === Modify Member Information ===\n");
		printf("Enter Member ID: ");
		scanf("%s", enteredMemID);
		printf("Enter IC Number (XXXXXX-XX-XXXX): ");
		scanf("%s", enteredICNo);

		totalMems = countMembers();

		FILE* modifiedMember;
		modifiedMember = fopen("members.bin", "rb+");

		if (modifiedMember == NULL) {
			printf("Error opening file!\n");
			return;
		}

		fread(inFileMember, sizeof(Member), totalMems, modifiedMember); // Read all member records into memory

		for (int i = 0; i < totalMems; i++) {
			if (strcmp(inFileMember[i].memberID, enteredMemID) == 0 && strcmp(inFileMember[i].icNo, enteredICNo) == 0) {
				found = i;
				printf("\n === Existing Member Information ===\n");
				printf("Member ID      : %s\n", inFileMember[i].memberID);
				printf("Name           : %s\n", inFileMember[i].name);
				printf("Password       : %s\n", inFileMember[i].password);
				printf("Gender         : %c\n", inFileMember[i].gender);
				printf("IC Number      : %s\n", inFileMember[i].icNo);
				printf("Contact Number : %s\n", inFileMember[i].contactNo);

				// Prompt user to modify each field
				printf("\n === Modify Member Information ===\n");
				printf("Enter New Name: ");
				scanf("%s", inFileMember[i].name);
				printf("Enter New Password: ");
				scanf("%s", inFileMember[i].password);
				printf("Enter New Gender (M/F): ");
				scanf(" %c", &inFileMember[i].gender);
				printf("Enter New IC Number (XXXXXX-XX-XXXX): ");
				scanf("%s", inFileMember[i].icNo);
				printf("Enter New Contact Number: ");
				scanf("%s", inFileMember[i].contactNo);

				printf("\nMember information modified successfully!\n");
				break; // Exit loop after modifying the record
			}
		}

		if (found == -1) {
			printf("Member ID and IC Number not found. Do you want to continue trying? (Y for Yes and any other elements for No): \n");
			rewind(stdin);
			scanf(" %c", &continousChoice);
		}

		// Write the modified member records back to the file
		rewind(modifiedMember);
		fwrite(inFileMember, sizeof(Member), totalMems, modifiedMember);

		fclose(modifiedMember);

	} while (toupper(continousChoice) == 'Y');
}


void memberMenu() {
	int choice;

	login();

	do {
		printf("\n=== Member Menu ===\n");
		printf("1. Search\n");
		printf("2. Modify\n");
		printf("3. Delete\n");
		printf("4. Logout and Exit\n");
		printf("Enter your choice: ");
		rewind(stdin);
		scanf("%d", &choice);

		switch (choice) {
		case 1:
			searchMemberInfo();
			break;
		case 2:
			modifyMemberInfo();
			break;
		case 3:
			printf("Delete function\n");
			break;
		case 4:
			printf("You Have Successfully Looged Out and Exit Member Menu. Have A Nice Day ^_^\n");
			return;
		default:
			printf("Invalid choice. Please enter a number between 1 to 4.\n");
			break;
		}
	} while (choice != 4);
}


int main() {
	int choice;

	do {
		printf("========================================\n");
		printf("+ Welcome to Member Information Module +\n");
		printf("========================================\n");
		printf("\nPlease select your role:\n");
		printf("1. Staff\n");
		printf("2. Member\n");
		printf("3. Non-Member\n");
		printf("4. Exit\n");
		printf("Enter your choice: ");
		scanf("%d", &choice);

		switch (choice) {
		case 1:
			//staffMenu();
			printf("Staff");
			break;
		case 2:
			memberMenu();
			break;
		case 3:
			nonMemberMenu();
			break;
		case 4:
			printf("\nYou Have Successfully Exit This Module. Have A Nice Day ^_^\n");
			break;
		default :
			printf("Invalid choice. Please try agian.\n");
			break;
		}
	} while (choice != 4);

	return 0;
}
