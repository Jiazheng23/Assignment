#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#include <windows.h>
#pragma warning (disable:4996)

//Ticket struct
typedef struct {
	char bookingID[6], memberID[6], trainID[6], bookingDate[11], departDate[11],
		departStation[40], arriveStation[40], paymentType, ticketStatus;
	int coachNo, seatNo, quantity;
	float paymentAmt;
}TrainTicket;

//Function declaration
void bookingMain();
void bookTicketHeading();
void stations();
void displayCoach();
void bookTicket();
void checkTicketStatus();
void editBooking();
void cancelBooking();
void displayBookedTickets();
void report();
//smaller functions that reads input
void enterMemberID(char id[6]);
void enterBookDate(int* d, int* m, int* y);
void enterStationNo(int* stationD, int* stationA);
char enterCoach();
void enterQuantity(int* quantity);
void enterSeatNo(int* seatNo);
void enterDepartTime(int* hour, int* minute);
void currentTime(int* day, int* month, int* year);


//main function
void main() {
	int choice;
	bookingMain();
	rewind(stdin);
	scanf("%d", &choice);

	while (choice < 0 || choice > 7) { //loop if invalid choice entered
		bookingMain();
		printf("\nInvalid choice, please enter again.\n");
		rewind(stdin);
		scanf("%d", &choice);
	}
	if (choice == 0) {
		system("cls");
		printf("Thank you for using our system!\n");
		exit(0);
	}
	else {
		switch (choice) {
		case 1:
			bookTicket();
			break;
		case 2:
			checkTicketStatus();
			break;
		case 3:
			editBooking();
			break;
		case 4:
			cancelBooking();
			break;
		case 5:
			displayBookedTickets();
			break;
		case 6:
			report();
			break;
		}
	}
}

void bookingMain() {
	system("cls");
	printf("Thank you for using XXX train!              \n");
	printf("--------------------------------------------\n");
	printf("|              Ticket Booking              |\n");
	printf("============================================\n");
	printf("[1] Book ticket                             \n");
	printf("[2] Check ticket status                     \n");
	printf("[3] Edit booking                            \n");
	printf("[4] Cancel booking                          \n");
	printf("[5] Display booked tickets (staff only)     \n");
	printf("[6] Report (staff only)                     \n");
	printf("[7] Return to main menu                     \n\n");
	printf("Press 0 to exit program                     \n");
	printf("Select your option (1-7): ");
}

void bookTicketHeading() {
	printf("--------------------------------------------\n");
	printf("|                Book tickets              |\n");
	printf("============================================\n");
}

void stations() {
	printf("[ 1]Alor Setar         [ 9]KL Sentral       \n");
	printf("[ 2]Sungai Petani      [10]Kajang           \n");
	printf("[ 3]Butterworth        [11]Seremban         \n");
	printf("[ 4]Taiping            [12]Gemas            \n");
	printf("[ 5]Ipoh               [13]Segamat          \n");
	printf("[ 6]Kampar             [14]Kluang           \n");
	printf("[ 7]Rawang             [15]Kulai            \n");
	printf("[ 8]Sungai Buloh       [16]JB Sentral       \n\n");
}

void displayCoach() {
	printf("[ 1]Coach A            [ 4]Coach D          \n");
	printf("[ 2]Coach B            [ 5]Coach E          \n");
	printf("[ 3]Coach C            [ 6]Coach F          \n");
}

void bookTicket() {
	//open Bookings.txt file
	FILE* bookTicketPT;
	bookTicketPT = fopen("Bookings,txt", "a");

	//declare struct
	TrainTicket ticket[100];

	//declarations
	char bookingID[6], memberID[6], trainID[6], bookingDate[11], departDate[11],
		paymentType, ticketStatus, coach;
	int seatNo[5], quantity, day, month, year, hour, minute, departStation, arriveStation;
	float paymentAmt;
	int choice = 0;

	if (bookTicketPT != NULL) {
		int counter = 0; //used to trigger error warning
		system("cls");
		bookTicketHeading();
		do {
			counter++;
			system("cls");
			bookTicketHeading();
			if (counter > 1) {
				printf("Invalid member format, please enter again\n");
			}
			enterMemberID(memberID);
		} while (memberID[0] != 'M' || isdigit(memberID[1]) == 0 || isdigit(memberID[2]) == 0
			|| isdigit(memberID[3]) == 0 || isdigit(memberID[4]) == 0 || strlen(memberID) > 5);
		
		counter = 0;
		//read bookingDate
		do {
			counter++;
			system("cls");
			bookTicketHeading();
			if (counter > 1) {
				printf("Invalid date format, please enter again\n");
			}
			enterBookDate(&day, &month, &year);
		} while (day < 1 || day > 31 || month < 1 || month > 12 || year < 2024 || year > 2026);

		counter = 0;
		//read departStation and arriveStation
		do {
			counter++;
			system("cls");
			bookTicketHeading();
			stations();
			if (counter > 1) {
				printf("Invalid station number, please enter again.\n");
			}
			enterStationNo(&departStation, &arriveStation);
		} while (departStation < 1 || departStation > 16 || arriveStation < 1 || arriveStation > 16 || (departStation == arriveStation));

		counter = 0;
		//read coach number
		do {
			counter++;
			system("cls");
			bookTicketHeading();
			displayCoach();
			if (counter > 1) {
				printf("Invalid coach, please enter again.\n");
			}
			coach = enterCoach();
		} while (coach != 'A' && coach != 'B' && coach != 'C' && coach != 'D' && coach != 'E' && coach != 'F');
		
		printf("%c", coach);

		counter = 0;
		//read booking quantity
		do {
			counter++;
			system("cls");
			bookTicketHeading();
			if (counter > 1) {
				printf("Invalid pax quantity, please enter again.\n");
			}
			enterQuantity(&quantity);
		} while (quantity < 1 || quantity > 4);

		//read seat number
		for (int i = 0; i < quantity; i++) {
			counter = 0;
			do {
				counter++;
				system("cls");
				bookTicketHeading();
				if (counter > 1) {
					printf("Invalid seat number, please enter again.\n");
				}
				enterSeatNo(&seatNo[i]);
			} while (seatNo[i] < 1 || seatNo[i] > 20);
		}

		fclose(bookTicketPT);
	}
	else {
		printf("Failed to open file.\n");
	}
}

void checkTicketStatus() {

}

void editBooking() {

}

void cancelBooking() {

}

void displayBookedTickets() {

}

void report() {

}

void enterMemberID(char id[6]) {
	printf("Insert member ID (M****): ");
	rewind(stdin);
	scanf("%[^\n]", id);
}

void enterBookDate(int* d, int* m, int* y) {
	printf("Insert booking date (DD-MM-YYYY):\n");
	rewind(stdin);
	scanf("%d-%d-%d", d, m, y);
}

void enterStationNo(int* stationD, int* stationA) {
	printf("Insert departing station (1-16): \n");
	rewind(stdin);
	scanf("%d", stationD);

	printf("Insert destination (1-16): \n");
	rewind(stdin);
	scanf("%d", stationA);
}

char enterCoach() {
	char c;

	printf("Insert coach alphabet (A-F):\n");
	rewind(stdin);
	scanf(" %c", &c);
	c = toupper(c);

	return c;
}

void enterQuantity(int* quantity) {
	printf("Insert seat pax (1-4):\n");
	rewind(stdin);
	scanf("%d", quantity);
}

void enterSeatNo(int* seatNo) {
	printf("Insert seat number (1-12):\n");
	rewind(stdin);
	scanf("%d", seatNo);
}

void enterDepartTime(int* hour, int* minute) {
	printf("Insert time with 24-hour time format(HH:MM):\n");
	rewind(stdin);
	scanf("%d:%d", hour, minute);
}

void currentTime(int* day, int* month, int* year) {
	SYSTEMTIME t;
	GetLocalTime(&t);
	int currentDay, currentMonth, currentYear;
	currentDay = t.wDay;
	currentMonth = t.wMonth;
	currentYear = t.wYear;
}
