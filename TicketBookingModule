#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#include <time.h>
#include <Windows.h>
#pragma warning (disable:4996)

//main functions
void bookingMain();
void bookTicketHeading();
void stations();
void displayCoach();
void bookTicket();
void checkTicketStatus();
void editBooking();
void cancelBooking();
void displayBookedTickets();
void report();
//input functions
void getBookingID();
void getMemberID(char memberID[6], int warning);
void getDepartDate(int* day, int* month, int* year, int sysyear, int warning);
void getCurrentTime(int* sysday, int* sysmonth, int* sysyear);
void getStation(char departStation[40], char arriveStation[40], int warning);
void getQuantity(int* quantity, int warning);
char getCoach(int warning);
void getSeatNo(int* seatNo, int noOfSeat, int warning);
void payment(int quantity);

void main() {
	int choice;
	bookingMain();
	rewind(stdin);
	scanf("%d", &choice);

	while (choice < 0 || choice > 7) { //loop if invalid choice entered
		bookingMain();
		printf("\nInvalid choice, please enter again.\n");
		rewind(stdin);
		scanf("%d", &choice);
	}
	if (choice == 0) {
		system("cls");
		printf("Thank you for using our system!\n");
		exit(0);
	}
	else {
		switch (choice) {
		case 1:
			bookTicket(); //mainly done except for train id and schedule part, requires some adjustment when integrating
			break;
		case 2:
			checkTicketStatus(); //IN PROGRESS
			break;
		case 3:
			editBooking(); //pending
			break;
		case 4:
			cancelBooking(); //pending
			break;
		case 5:
			displayBookedTickets(); //pending
			break;
		case 6:
			report(); //pending
			break;
		}
	}
	return 0;
}

void bookingMain() {
	system("cls");
	printf("Thank you for using XXX train!              \n");
	printf("--------------------------------------------\n");
	printf("|              Ticket Booking              |\n");
	printf("============================================\n");
	printf("[1] Book ticket                             \n");
	printf("[2] Check ticket status                     \n");
	printf("[3] Edit booking                        TBA \n");
	printf("[4] Cancel booking                      TBA \n");
	printf("[5] Display booked tickets (staff only) TBA \n");
	printf("[6] Report (staff only)                 TBA \n\n");

	printf("Press 0 to exit program                     \n");
	printf("Select your option (1-7): ");
}

void bookTicketHeading() {
	printf("--------------------------------------------\n");
	printf("|                Book tickets              |\n");
	printf("============================================\n");
}

void stations() {
	printf("[ 1]Alor Setar         [ 9]KL Sentral       \n");
	printf("[ 2]Sungai Petani      [10]Kajang           \n");
	printf("[ 3]Butterworth        [11]Seremban         \n");
	printf("[ 4]Taiping            [12]Gemas            \n");
	printf("[ 5]Ipoh               [13]Segamat          \n");
	printf("[ 6]Kampar             [14]Kluang           \n");
	printf("[ 7]Rawang             [15]Kulai            \n");
	printf("[ 8]Sungai Buloh       [16]JB Sentral       \n\n");
}

void displayCoach() {
	printf("[ 1]Coach A            [ 4]Coach D          \n");
	printf("[ 2]Coach B            [ 5]Coach E          \n");
	printf("[ 3]Coach C            [ 6]Coach F          \n");
}

//INSERT NEW BOOKING
void bookTicket() {
	//DECLARATIONS
	typedef struct {
		char memberID[6], bookingDate[11], departDate[11], departStation[40], arriveStation[40], coach;
		int bookingNo, memberNo, trainNo, seatNo[7], quantity, day, month, year, hour, minute;
		double payment;
	}TrainTicket;
	TrainTicket ticket[100];

	typedef struct {
		char memberID[6], departStation[40], arriveStation[40], coach;
		int memberNo, day, month, year, quantity, seatNo[6];
	}Info;
	Info user;

	FILE* readTicketPT, * insertBooking;

	//OPEN Bookings.txt for reading
	readTicketPT = fopen("Bookings.txt", "r");

	//RECORDS the amount of rows in file and their values
	int record = 0;
	while (!feof(readTicketPT)) {
		fscanf(readTicketPT, "B%d|%[^|]|%[^|]|%[^|]|%[^|]|%[^|]|T%d|%c|%d|%lf\n", &ticket[record].bookingNo, ticket[record].memberID,
			ticket[record].bookingDate, ticket[record].departDate, ticket[record].departStation, ticket[record].arriveStation,
			&ticket[record].trainNo, &ticket[record].coach, &ticket[record].seatNo, &ticket[record].payment);
		record++;
	};
	fclose(readTicketPT); //close file

	//OPEN Bookings.txt for append (insert booking record)
	insertBooking = fopen("Bookings.txt", "a");
	if (insertBooking != NULL) {
		int warning = 0; //used to display error input
		//input MEMBER ID
		system("cls");
		bookTicketHeading();
		getMemberID(user.memberID, warning);

		//input DEPARTURE DATE
		system("cls");
		bookTicketHeading();
		int sysDay, sysMonth, sysYear;
		getCurrentTime(&sysDay, &sysMonth, &sysYear);
		getDepartDate(&user.day, &user.month, &user.year, sysYear, warning);

		//input DEPART AND ARRIVE STATION
		system("cls");
		bookTicketHeading();
		stations();
		getStation(user.departStation, user.arriveStation, warning);

		//input BOOKING QUANTITY
		system("cls");
		bookTicketHeading();
		getQuantity(&user.quantity, warning);

		//input COACH
		system("cls");
		bookTicketHeading();
		displayCoach();
		user.coach = getCoach(warning);

		//input SEAT NUMBER
		for (int noOfSeat = 0; noOfSeat < user.quantity; noOfSeat++) {
			system("cls");
			bookTicketHeading();
			getSeatNo(&user.seatNo[noOfSeat], noOfSeat, warning);
		}

		//PAYMENT INFO
		system("cls");
		bookTicketHeading();
		payment(user.quantity);

		/*input TRAIN ID*/

		/*input TIME*/

		/*
		USED FOR CHECKING, DELETE LATER
		printf("\n%s\n", user.memberID);
		printf("%02d-%02d-%d\n", user.day, user.month, user.year);
		printf("%s / %s\n", user.departStation, user.arriveStation);
		printf("%d\n", user.quantity);
		printf("%c\n", user.coach);
		for (int i = 0; i < user.quantity; i++) {
			printf("%d ", user.seatNo[i]);
		}
		*/

		//INSERT VALUE INTO FILE, CHANGE LATER FOR TRAIN ID & TIME (SCHEDULE)
		insertBooking = fopen("Bookings.txt", "a");
		for (int row = 0; row < user.quantity; row++) {
			fprintf(insertBooking, "B%d|%s|%02d-%02d-%d|%02d-%02d-%d|%s|%s|T101|%c|%d|30.00\n", (ticket[record - 1].bookingNo + 1 + row),
				user.memberID, sysDay, sysMonth, sysYear, user.day, user.month, user.year, user.departStation, user.arriveStation,
				user.coach, user.seatNo[row]);
			printf("Your No\.%d booking ID is B%d \n", (row + 1), (ticket[record - 1].bookingNo + 1 + row));
		}
	}
	else {
		printf("Error opening file.\n");
	}
}

//SEARCH BOOKING ID
void checkTicketStatus() {
	typedef struct {
		char bookingID[6], memberID[6], bookingDate[11], departDate[11], departStation[40], arriveStation[40], coach;
		int trainNo, seatNo, quantity, day, month, year, hour, minute;
		double payment;
	}TrainTicket;
	TrainTicket ticket[100];

	FILE* readTicketPT;

	//OPEN Bookings.txt for reading
	readTicketPT = fopen("Bookings.txt", "r");

	if (readTicketPT != NULL) {
		//RECORDS the amount of rows in file and their values
		int record = 0;
		while (!feof(readTicketPT)) {
			fscanf(readTicketPT, "%[^|]|%[^|]|%[^|]|%[^|]|%[^|]|%[^|]|T%d|%c|%d|%lf\n", ticket[record].bookingID, ticket[record].memberID,
				ticket[record].bookingDate, ticket[record].departDate, ticket[record].departStation, ticket[record].arriveStation,
				&ticket[record].trainNo, &ticket[record].coach, &ticket[record].seatNo, &ticket[record].payment);
			record++;
		};

		//ask user to enter bookingID to search for
		int found = -1, warning2 = 0;
		do {
			int warning = 0;
			char bookingID[6];
			system("cls");
			bookTicketHeading();
			if (warning2 > 0) {
				printf("BookingID not found, please try again.\n");
			}
			getBookingID(bookingID, warning);

			//compare user input with array in file
			for (int row = 0; row < record; row++) {
				if (strcmp(ticket[row].bookingID, bookingID) == 0) {
					found = row;
					printf("\n");
					printf("       Booking ID: %s\n", ticket[row].bookingID);
					printf("        Member ID: %s\n", ticket[row].memberID);
					printf("     Booking Date: %s\n", ticket[row].bookingDate);
					printf("   Departure Date: %s\n", ticket[row].departDate);
					printf("Departure Station: %s\n", ticket[row].departStation);
					printf("      Destination: %s\n", ticket[row].arriveStation);
					printf("         Train ID: T%d\n", ticket[row].trainNo);
					printf("         Coach ID: %c\n", ticket[row].coach);
					printf("          Seat No: %d\n", ticket[row].seatNo);
					printf("            Price: %.2lf\n", ticket[row].payment);
				}
			}
			warning2++;
		} while (found == -1);
	}
	else {
		printf("File not found, system gg.\n");
	}
}

void editBooking() {

}
void cancelBooking() {

}
void displayBookedTickets() {

}
void report() {

}

void getBookingID(char bookingID[6], int warning) {
	do {
		if (warning > 0) {
			printf("\nInvalid ID format, please try again.\n");
		}
		printf("Search for booking ID status (B****): ");
		rewind(stdin);
		scanf("%[^\n]", bookingID);
		bookingID[0] = toupper(bookingID[0]);
		warning++;
	} while (bookingID[0] != 'B' || isdigit(bookingID[1]) == 0 || isdigit(bookingID[2]) == 0
		|| isdigit(bookingID[3]) == 0 || isdigit(bookingID[4]) == 0 || strlen(bookingID) > 5);
}

void getMemberID(char memberID[6], int warning) {
	do {
		if (warning > 0) {
			printf("\nInvalid member format, please enter again\n");
		}
		printf("Insert member ID (M****): ");
		rewind(stdin);
		scanf("%[^\n]", memberID);
		memberID[0] = toupper(memberID[0]);
		warning++;
	} while (memberID[0] != 'M' || isdigit(memberID[1]) == 0 || isdigit(memberID[2]) == 0
		|| isdigit(memberID[3]) == 0 || isdigit(memberID[4]) == 0 || strlen(memberID) > 5);
}

void getDepartDate(int* day, int* month, int* year, int sysYear, int warning) {
	do {
		if (warning > 0) {
			printf("\nInvalid date format, please enter again.\n");
		}
		printf("Insert departure date (DD-MM-YYYY): ");
		rewind(stdin);
		scanf("%d-%d-%d", day, month, year);
		warning++;
	} while (*day < 1 || *day > 31 || *month < 1 || *month > 12 || *year < sysYear);
}

void getCurrentTime(int* sday, int* smonth, int* syear) {
	time_t t = time(NULL);
	struct tm date = *localtime(&t);
	//add 1 to month, 1900 to year to show the proper numbers
	printf("Current date is %02d-%02d-%d\n", date.tm_mday, date.tm_mon + 1, date.tm_year + 1900);
	*sday = date.tm_mday;
	*smonth = date.tm_mon + 1;
	*syear = date.tm_year + 1900;
}

void getStation(char departStation[40], char arriveStation[40], int warning) {
	int dStat, aStat; //represents departure and arrival stations
	do {
		if (warning > 0) {
			printf("\nInvalid station, please enter again.\n");
		}
		printf("Insert departure station (1-16): ");
		rewind(stdin);
		scanf("%d", &dStat);
		printf("Insert destination (1-16): ");
		rewind(stdin);
		scanf("%d", &aStat);
		warning++;
	} while (dStat < 1 || dStat > 16 || aStat < 1 || aStat > 16 || (dStat == aStat));
	//get depart station with dStat
	if (dStat == 1) {
		strcpy(departStation, "Alor Setar");
	}
	else if (dStat == 2) {
		strcpy(departStation, "Sungai Petani");
	}
	else if (dStat == 3) {
		strcpy(departStation, "Butterworth");
	}
	else if (dStat == 4) {
		strcpy(departStation, "Taiping");
	}
	else if (dStat == 5) {
		strcpy(departStation, "Ipoh");
	}
	else if (dStat == 6) {
		strcpy(departStation, "Kampar");
	}
	else if (dStat == 7) {
		strcpy(departStation, "Rawang");
	}
	else if (dStat == 8) {
		strcpy(departStation, "Sungai Buloh");
	}
	else if (dStat == 9) {
		strcpy(departStation, "KL Sentral");
	}
	else if (dStat == 10) {
		strcpy(departStation, "Kajang");
	}
	else if (dStat == 11) {
		strcpy(departStation, "Seremban");
	}
	else if (dStat == 12) {
		strcpy(departStation, "Gemas");
	}
	else if (dStat == 13) {
		strcpy(departStation, "Segamat");
	}
	else if (dStat == 14) {
		strcpy(departStation, "Kluang");
	}
	else if (dStat == 15) {
		strcpy(departStation, "Kulai");
	}
	else {
		strcpy(departStation, "JB Sentral");
	}
	//get arrive station with aStat
	if (aStat == 1) {
		strcpy(arriveStation, "Alor Setar");
	}
	else if (aStat == 2) {
		strcpy(arriveStation, "Sungai Petani");
	}
	else if (aStat == 3) {
		strcpy(arriveStation, "Butterworth");
	}
	else if (aStat == 4) {
		strcpy(arriveStation, "Taiping");
	}
	else if (aStat == 5) {
		strcpy(arriveStation, "Ipoh");
	}
	else if (aStat == 6) {
		strcpy(arriveStation, "Kampar");
	}
	else if (aStat == 7) {
		strcpy(arriveStation, "Rawang");
	}
	else if (aStat == 8) {
		strcpy(arriveStation, "Sungai Buloh");
	}
	else if (aStat == 9) {
		strcpy(arriveStation, "KL Sentral");
	}
	else if (aStat == 10) {
		strcpy(arriveStation, "Kajang");
	}
	else if (aStat == 11) {
		strcpy(arriveStation, "Seremban");
	}
	else if (aStat == 12) {
		strcpy(arriveStation, "Gemas");
	}
	else if (aStat == 13) {
		strcpy(arriveStation, "Segamat");
	}
	else if (aStat == 14) {
		strcpy(arriveStation, "Kluang");
	}
	else if (aStat == 15) {
		strcpy(arriveStation, "Kulai");
	}
	else {
		strcpy(arriveStation, "JB Sentral");
	}
}

void getQuantity(int* quantity, int warning) {
	do {
		if (warning > 0) {
			printf("\nInvalid quantity, please enter again.\n");
		}
		printf("Insert booking pax (1-6): ");
		rewind(stdin);
		scanf("%d", quantity);
		warning++;
	} while (*quantity < 1 || *quantity > 6);
}

char getCoach(int warning) {
	char coach;
	do {
		if (warning > 0) {
			printf("\nInvalid coach format, please enter again.\n");
		}
		printf("Insert coach alphabet (A-F): ");
		rewind(stdin);
		scanf(" %c", &coach);
		coach = toupper(coach);
		warning++;
	} while (coach < 'A' || coach > 'F');

	return coach;
}

void getSeatNo(int* seatNo, int noOfSeat, int warning) {
	do {
		if (warning > 0) {
			printf("\nSeat has been occupied or invalid number.\n");
		}
		printf("Insert seat number %d (1-20): ", noOfSeat + 1);
		rewind(stdin);
		scanf("%d", seatNo);
		warning++;
	} while (*seatNo < 1 || *seatNo > 20);
}

void payment(int quantity) {
	double payment;
	payment = 30.0 * quantity;
	printf("Total payment required: RM %.2f\n", payment);
}
